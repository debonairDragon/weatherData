import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;
/**
 * Write a description of class coldestDay here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class coldestDay
{
public CSVRecord coldestHourInFile(CSVParser parser) {
    CSVRecord smallestSoFar = null;
    for (CSVRecord currentRow : parser) {
      if (smallestSoFar == null) {
          
          smallestSoFar = currentRow;
    }
    else{
        double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
        double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
        if (currentTemp == -9999) {
            continue;
    }
    if (currentTemp < smallestTemp) {
      smallestSoFar = currentRow;  
    }
    
};
}
return smallestSoFar;
}

public void testColdestHourInFile() {
  FileResource fileEvaluated = new FileResource();
  CSVParser parser = fileEvaluated.getCSVParser();
  CSVRecord smallest = coldestHourInFile(parser);
  System.out.println("The coldest temperature is " + smallest);
};

public CSVRecord hottestHourInFile(CSVParser parser) {
 CSVRecord largestSoFar = null;
 for (CSVRecord currentRow : parser) {
     if (largestSoFar == null) {
         largestSoFar = currentRow;
}
else {
    double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
    double largestTemp = Double.parseDouble(largestSoFar.get("TemperatureF"));
    if (currentTemp == -9999) {
        continue;
}
if (currentTemp > largestTemp){
 largestSoFar = currentRow;   
}
};
}
return largestSoFar;
}

public CSVRecord lowestHumidityInFile(CSVParser parser) {
  CSVRecord lowestHumiditySoFar = null;
  for (CSVRecord currentRow : parser) {
      if (lowestHumiditySoFar == null) {
          lowestHumiditySoFar = currentRow;
        } else {
            if (currentRow.get("Humidity").equals("N/A")) {
             continue;   
            }
            double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
            double lowestHumidity = Double.parseDouble(lowestHumiditySoFar.get("Humidity"));
            if (currentHumidity < lowestHumidity) {
             lowestHumiditySoFar = currentRow;   
            }
        }
    }
  return lowestHumiditySoFar;
};

public void testLowestHumidityInFile() {
    FileResource fr = new FileResource();
    CSVParser parser = fr.getCSVParser();
    CSVRecord lowest = lowestHumidityInFile(parser);
    System.out.println("The lowest humidity was " + lowest);
};

public CSVRecord lowestHumidityInManyFiles() {
  CSVRecord lowestSoFar = null;
  DirectoryResource dr = new DirectoryResource();
  for (File f : dr.selectedFiles()) {
     FileResource fr = new FileResource(f);
     CSVRecord currentRow = lowestHumidityInFile(fr.getCSVParser());
     if (lowestSoFar == null) {
         lowestSoFar = currentRow;
        }
     if (currentRow.get("Humidity").equals("N/A")) {
         continue;
        }
     else {
           double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
           double lowestHumidity = Double.parseDouble(lowestSoFar.get("Humidity"));
           if(currentHumidity < lowestHumidity) {
               lowestSoFar = currentRow;
            }
        }
    }
    return lowestSoFar;
};

public double averageTemperature(CSVParser parser) {
 double averageTemp;
 double sum = 0;
 int counter = 0;
 
 for (CSVRecord record : parser) {
     sum += Double.parseDouble(record.get("TemperatureF"));
     counter ++;
    }
    averageTemp = sum/counter;
    return averageTemp;
}

public void testAverageTemperature() {
 FileResource fr = new FileResource();
 CSVParser parser = fr.getCSVParser();
 double average = averageTemperature(parser);
 System.out.println("The average temperature between all these days was " + average + " degrees F");
}



public void testLowestHumidityInManyFiles() {
    CSVRecord lowest = lowestHumidityInManyFiles();
    System.out.println("The lowest humidity in all the days was " + lowest);
};

public static double averageTemperatureWithHighHumidityInFile(CSVParser parser, double level) {
    double averageTemp;
    double sum = 0;
    int counter = 0;
    for (CSVRecord record : parser){
        double humidity = Double.parseDouble(record.get("Humidity"));
        if (humidity > level) {
         sum += Double.parseDouble(record.get("TemperatureF"));
         counter ++;
        }
    }
    averageTemp = sum/counter;
    return averageTemp;
}

public void testAverageTempWHumidity() {
 FileResource fr = new FileResource();
 CSVParser parser = fr.getCSVParser();
 double averageTempHumidity = averageTemperatureWithHighHumidityInFile(parser, 80);
 System.out.println("The average temperature from days with humidity above what you specified was " + averageTempHumidity);
}

public CSVRecord coldestInManyDays() {
 CSVRecord smallestSoFar = null;
 DirectoryResource dr = new DirectoryResource();
 String file = "";
 for (File f : dr.selectedFiles()){
     FileResource fr = new FileResource(f);
     CSVRecord currentRow = coldestHourInFile(fr.getCSVParser());
     if (smallestSoFar == null) {
         smallestSoFar = currentRow;
         file = f.getAbsolutePath();
        } else 
     if (smallestSoFar.equals("-9999")) {
         continue;
    }
    {
        double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
        double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
        if (currentTemp < smallestTemp) {
            smallestSoFar = currentRow;
            file = f.getAbsolutePath();
        }
    
}
}
return smallestSoFar;
}
public void testColdestInManyDays(){
CSVRecord coldestManyDays = coldestInManyDays();
System.out.println("The smallest temperature between all days was " + coldestManyDays);
}
};
